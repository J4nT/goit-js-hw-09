{"mappings":"qhBAiCA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,kBAC/BE,EAAOH,SAASC,cAAc,iBAC9BG,EAAeJ,SAASK,iBAAiB,mBACzCC,EAASN,SAASC,cAAc,mBAatCF,EAAKQ,iBAAiB,UAAUC,IAC9BA,EAAMC,iBACN,IAAIC,EAAc,EAElBC,YAAW,KACT,MAAMC,EAAQC,aAAY,KACxB,GAAIH,GAAeJ,EAAOQ,MAKxB,OAJAC,cAAcH,QACdR,EAAaY,SAAQC,IACnBA,EAAMH,MAAQ,EAAE,KApB1B,SAAuBI,EAAUC,GAC/B,MAAMC,EAAaC,KAAKC,SAAW,GACnC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,uBAAqBN,QAAiBC,OAE5CM,EAAK,sBAAoBP,QAAeC,MAAU,G,EAmBpDO,CACEhB,EAAc,EACdiB,SAASzB,EAAMY,OAASa,SAASxB,EAAKW,OAASJ,GAE9CkB,MAAKC,GAAYC,EAAAjC,GAASkC,OAAOC,QAAQH,KACzCI,OAAMC,GAAYJ,EAAAjC,GAASkC,OAAOI,QAAQD,KAC7CxB,GAAa,GACZP,EAAKW,MAAM,GACbZ,EAAMY,MAAM","sources":["src/js/03-promises.js"],"sourcesContent":["/* import Notiflix from 'notiflix';\n\ndocument.querySelector('.form').addEventListener('submit', function (event) {\n  event.preventDefault();\n  const delay = parseInt(this.elements['delay'].value);\n  const step = parseInt(this.elements['step'].value);\n  const amount = parseInt(this.elements['amount'].value);\n});\nlet amount;\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfor (let i = 0; i <= amount; i++) {  \n  createPromise(position, delay)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n};\n */\n\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delay = document.querySelector(\"[name='delay']\");\nconst step = document.querySelector(\"[name='step']\");\nconst numberInputs = document.querySelectorAll(\"[type='number']\");\nconst amount = document.querySelector(\"[name='amount']\");\n\nfunction createPromise(position, delay) { \n  const newResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (newResolve) {\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  });\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  let newPromises = 0;\n\n  setTimeout(() => {\n    const timer = setInterval(() => {\n      if (newPromises >= amount.value) {\n        clearInterval(timer);\n        numberInputs.forEach(input => {\n          input.value = '';\n        });\n        return;\n      }\n\n      createPromise(\n        newPromises + 1,\n        parseInt(delay.value) + parseInt(step.value) * newPromises\n      )\n        .then(resolved => Notiflix.Notify.success(resolved))\n        .catch(rejected => Notiflix.Notify.failure(rejected));\n      newPromises++;\n    }, step.value);\n  }, delay.value);\n});"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$numberInputs","querySelectorAll","$47d4ff9957288465$var$amount","addEventListener","event","preventDefault","newPromises","setTimeout","timer","setInterval","value","clearInterval","forEach","input","position","delay1","newResolve","Math","random","Promise","resolve","reject","$47d4ff9957288465$var$createPromise","parseInt","then","resolved","$parcel$interopDefault","Notify","success","catch","rejected","failure"],"version":3,"file":"03-promises.33d2a599.js.map"}